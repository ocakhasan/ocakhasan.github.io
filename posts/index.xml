<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Hasan Ocak Tech Blog</title><link>https://ocakhasan.github.io/posts/</link><description>All Posts | Hasan Ocak Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>tr</language><managingEditor>hasanocak.tech@gmail.com (Hasan Ocak)</managingEditor><webMaster>hasanocak.tech@gmail.com (Hasan Ocak)</webMaster><lastBuildDate>Sun, 31 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ocakhasan.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>(tr) 2023 özet &amp; 2024 beklentileri</title><link>https://ocakhasan.github.io/2024-expectations/</link><pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/2024-expectations/</guid><description>Yeni yılda neler yapmayı hedefliyorum.</description></item><item><title>Golang Context Guide in Concurrent Programs</title><link>https://ocakhasan.github.io/golang-context-complete-guide/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/golang-context-complete-guide/</guid><description>Let&amp;rsquo;s check how to use context effectively in concurrency.</description></item><item><title>Integration Testing for MongoDB-Backed REST APIs with Golang</title><link>https://ocakhasan.github.io/golang-mongo-db-rest-api-integration-tests/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/golang-mongo-db-rest-api-integration-tests/</guid><description>Let&amp;rsquo;s write a real integration tests for a golang rest api.</description></item><item><title>(tr) beklentiler</title><link>https://ocakhasan.github.io/expectations/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/expectations/</guid><description>beklentiler hayatımızı nasıl yönlendiriyor onu konuşalım.</description></item><item><title>AWS SQS SDK &amp; Golang Complete Cheat Sheet</title><link>https://ocakhasan.github.io/aws-sqs-golang-function-examples/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/aws-sqs-golang-function-examples/</guid><description>Let&amp;rsquo;s see how we can utilize AWS SQS with Golang.</description></item><item><title>Analysis Of My Lichess Bullet Games</title><link>https://ocakhasan.github.io/analysis-of-chess-games/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/analysis-of-chess-games/</guid><description>A simple analysis on the bullet games I played on Lichess</description></item><item><title>(TR) Stoacılık, Bilişsel Mesafe Koyma</title><link>https://ocakhasan.github.io/review-of-how-to-think-like-roman-emperor/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/review-of-how-to-think-like-roman-emperor/</guid><description>Bilişsel Mesafe terimini tartışalım.</description></item><item><title>Setting up a GraphQL Server in Golang</title><link>https://ocakhasan.github.io/golang-setup-graphql-server/</link><pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/golang-setup-graphql-server/</guid><description>Lets setup a graphql server in golang</description></item><item><title>My Notes on Designing Data Intensive Applications</title><link>https://ocakhasan.github.io/notes-on-designing-data-intensive-applications/</link><pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/notes-on-designing-data-intensive-applications/</guid><description>Here is my notes on Designing Data Intensive Applications</description></item><item><title>Golang Sqs Consumer Worker Pool</title><link>https://ocakhasan.github.io/golang-sqs-consumer-worker-pool/</link><pubDate>Fri, 07 Jul 2023 23:44:32 +0300</pubDate><author>Hasan Ocak</author><guid>https://ocakhasan.github.io/golang-sqs-consumer-worker-pool/</guid><description>Implementing Worker Pool into an SQS Consumer with Golang.</description></item></channel></rss>